{"id":811424461,"lang":"cpp","lang_name":"C++","time":"4 months, 2 weeks","timestamp":1664464601,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/811424461/","is_pending":"Not Pending","title":"Pacific Atlantic Water Flow","memory":"N/A","code":"class Solution {\npublic:\n    \n    int explore_dualPath(vector<vector<int>> heights,vector<vector<int>> &result,vector<vector<int>> &state, int r,int c)\n    {\n        if(state[r][c]!=-1) \n            return state[r][c];\n        state[r][c]=0;\n         int dr[4]={1,-1,0,0};\n         int dc[4]={0,0,1,-1};\n         int state_node=-1;\n         int rr,cc;\n        cout<<\"r    :\"<<r<<\",c    :\"<<c<<endl;\n        int m=heights.size();\n        int n=heights[0].size();\n        \n         bool AtlanticFlag=false;\n         bool PacificFlag=false;\n         bool resultFlag=false;\n        \n         for(int i=0;i<4;i++)\n         {\n             rr=r+dr[i];\n             cc=c+dc[i];\n\n             if(rr<0)\n             {\n                 if(rr==-1)\n                    PacificFlag=true;\n                 continue;\n             }\n               \n             if(cc<0)\n             {\n                 if(cc==-1)\n                    PacificFlag=true;\n                 continue;                 \n             }\n\n             if(rr>=m)\n             {\n                 if(rr==m)\n                    AtlanticFlag=true;\n                 continue;\n             }\n            if(cc>=n)\n            {\n                if(cc==n)\n                    AtlanticFlag=true;\n                continue;\n            }\n             \n             if(heights[rr][cc]<=heights[r][c])\n             {\n                 if(state[rr][cc]==-1)\n                 {\n                     state_node=explore_dualPath(heights,result,state,rr,cc);\n                     if(heights[rr][cc]<=heights[r][c])\n                     {\n                         if(state_node==1)\n                             PacificFlag=true;\n                         if(state_node==2)\n                             AtlanticFlag=true;\n                            if(state_node==3)\n                            {\n                                state[r][c]=3;\n                                result.push_back(vector<int>{r,c});\n                                return state[r][c];\n                            }\n                     }\n                 }\n                 else if(state[rr][cc]==0)\n                     continue;\n                else if(state[rr][cc]==3)\n                {\n                    PacificFlag=true;\n                    AtlanticFlag=true;\n                }\n                else if(state[rr][cc]==2)\n                {\n                    AtlanticFlag=true;\n                }\n                 else if(state[rr][cc]==1)\n                 {\n                     PacificFlag=true;\n                 }\n             }\n            if(PacificFlag && AtlanticFlag)\n            {\n                    state[r][c]=3;\n                    result.push_back(vector<int>{r,c});\n                    return state[r][c];\n                \n            }\n         }\n            if(PacificFlag && AtlanticFlag)\n            {\n                    state[r][c]=3;\n                    result.push_back(vector<int>{r,c});\n                    return state[r][c];\n                \n            }\n            if(PacificFlag && !AtlanticFlag)\n            {\n                    state[r][c]=1;\n                    return state[r][c];\n                \n            }\n        \n            if(!PacificFlag && AtlanticFlag)\n            {\n                    state[r][c]=2;\n                    return state[r][c];\n                \n            }\n\n        \n        return state[r][c];\n        \n    }\n    \n    \n    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {\n        vector<vector<int>> result;\n        result.resize(0);\n        \n        int m=heights.size();\n        int n=heights[0].size();\n        vector<vector<int>> state;\n        state.resize(m,vector <int> (n));\n        bool isPossibleAtRC;\n        for(int i=0;i<m;i++)\n        {\n            for(int j=0;j<n;j++)\n            {\n                state[i][j]=-1;\n            }\n        }\n         for(int i=0;i<m;i++)\n        {\n            for(int j=0;j<n;j++)\n            {\n                explore_dualPath(heights,result,state,i,j);\n            }\n        }\n        \n        \n       return result; \n    }\n};","compare_result":"11111101001111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"pacific-atlantic-water-flow","has_notes":false}