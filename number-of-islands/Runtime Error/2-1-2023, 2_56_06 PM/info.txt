{"id":889662530,"lang":"python3","lang_name":"Python3","time":"2 weeks, 1 day","timestamp":1675284966,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/889662530/","is_pending":"Not Pending","title":"Number of Islands","memory":"N/A","code":"class Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n\n        if not grid:\n            return 0\n\n        rows, cols = len(grid), len(grid[0])\n        visit= set()\n        islands=0\n\n        def bfs(r,c):\n\n            q = collections.deque()\n            visit.add((r,c))\n            q.append((r,c))\n\n            while q:\n\n                row, cols = q.pop()\n                directions = [[1,0],[-1,0],[0,1],[0,-1]]\n\n                for dr,dc in directions:\n                    r,c = row + dr, cols + dc\n                    if (r in range(rows)) and c in range(cols) and grid[r][c] ==\"1\" and (r,c) not in visit:\n                        q.append((r,c))\n                        visit.add((r,c))\n\n                for r in range(rows):\n                    for c in range(cols):\n                        if grid[r][c]==\"1\" and (r,c) not in visit:\n                            bfs(r,c)\n                            islands+=1\n\n                return islands\n","compare_result":"0000000000000000000000000000000000000000000000000","title_slug":"number-of-islands","has_notes":false}